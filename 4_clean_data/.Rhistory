group_by(caregiver) %>%
count() %>%
filter(n > 1) %>%
collect()
# --- check number of rows in the sampled dataset
# only test on dataset with more than 10k samples
subset_data %>% compute()
reticulate::repl_python()
library(ArrowDQAToolkit)
Sys.setenv(SPARK_HOME="/home/anhptq/spark/spark-3.3.0-bin-hadoop3")
personal_info <- as_arrow_table(read_parquet(file.path("/./", "cluster_data", "vrdata", "standardized", "personal_info.parquet")))
personal_info
# get blocks that are valid for further entity resolution step
valid_blocks <- personal_info %>%
filter(
str_length(name) > 1 | str_length(caregiver) > 1
) %>%
mutate(
block = paste(dob, ethnic, sex, sep="_")
) %>%
group_by(block) %>%
summarize(
no_records = n(),
min_date = min(vacdate),
max_date = max(vacdate)
) %>%
filter( (min_date != max_date) & (no_records > 1) ) %>%
compute()
valid_blocks
candidates <- personal_info %>%
filter(
# only include records with valid name of caregiver
str_length(name) > 1 | str_length(caregiver) > 1
) %>%
mutate(
block = paste(dob, ethnic, sex, sep="_")
) %>%
filter(block %in% valid_blocks$block) %>%
compute()
candidates
valid_blocks %>%
mutate(
block_pairs = no_records*(no_records - 1)/2
) %>%
summarize(
total_pairs = sum(block_pairs)
) %>%
collect()
subset_blocks <- valid_blocks[1:10,]
subset_data <- candidates %>%
filter(block %in% subset_blocks$block) %>%
compute()
# -- test: check caregivers associated with more than 1 pid
subset_data %>%
group_by(caregiver) %>%
count() %>%
filter(n > 1) %>%
collect()
# --- check number of rows in the sampled dataset
# only test on dataset with more than 10k samples
subset_data %>% compute()
library(ArrowDQAToolkit)
Sys.setenv(SPARK_HOME="/home/anhptq/spark/spark-3.3.0-bin-hadoop3")
personal_info <- as_arrow_table(read_parquet(file.path("/./", "cluster_data", "vrdata", "standardized", "personal_info.parquet")))
personal_info
# get blocks that are valid for further entity resolution step
valid_blocks <- personal_info %>%
filter(
str_length(name) > 1 | str_length(caregiver) > 1
) %>%
mutate(
block = paste(dob, ethnic, sex, sep="_")
) %>%
group_by(block) %>%
summarize(
no_records = n(),
min_date = min(vacdate),
max_date = max(vacdate)
) %>%
filter( (min_date != max_date) & (no_records > 1) ) %>%
compute()
valid_blocks
candidates <- personal_info %>%
filter(
# only include records with valid name of caregiver
str_length(name) > 1 | str_length(caregiver) > 1
) %>%
mutate(
block = paste(dob, ethnic, sex, sep="_")
) %>%
filter(block %in% valid_blocks$block) %>%
compute()
candidates
valid_blocks %>%
mutate(
block_pairs = no_records*(no_records - 1)/2
) %>%
summarize(
total_pairs = sum(block_pairs)
) %>%
collect()
subset_blocks <- valid_blocks[1:10,]
subset_data <- candidates %>%
filter(block %in% subset_blocks$block) %>%
compute()
# -- test: check caregivers associated with more than 1 pid
subset_data %>%
group_by(caregiver) %>%
count() %>%
filter(n > 1) %>%
collect()
# --- check number of rows in the sampled dataset
# only test on dataset with more than 10k samples
subset_data %>% compute()
library(ArrowDQAToolkit)
Sys.setenv(SPARK_HOME="/home/anhptq/spark/spark-3.3.0-bin-hadoop3")
personal_info <- as_arrow_table(read_parquet(file.path("/./", "cluster_data", "vrdata", "standardized", "personal_info.parquet")))
personal_info
# get blocks that are valid for further entity resolution step
valid_blocks <- personal_info %>%
filter(
str_length(name) > 1 | str_length(caregiver) > 1
) %>%
mutate(
block = paste(dob, ethnic, sex, sep="_")
) %>%
group_by(block) %>%
summarize(
no_records = n(),
min_date = min(vacdate),
max_date = max(vacdate)
) %>%
filter( (min_date != max_date) & (no_records > 1) ) %>%
compute()
valid_blocks
candidates <- personal_info %>%
filter(
# only include records with valid name of caregiver
str_length(name) > 1 | str_length(caregiver) > 1
) %>%
mutate(
block = paste(dob, ethnic, sex, sep="_")
) %>%
filter(block %in% valid_blocks$block) %>%
compute()
candidates
valid_blocks %>%
mutate(
block_pairs = no_records*(no_records - 1)/2
) %>%
summarize(
total_pairs = sum(block_pairs)
) %>%
collect()
subset_blocks <- valid_blocks[1:10,]
subset_data <- candidates %>%
filter(block %in% subset_blocks$block) %>%
compute()
# -- test: check caregivers associated with more than 1 pid
subset_data %>%
group_by(caregiver) %>%
count() %>%
filter(n > 1) %>%
collect()
# --- check number of rows in the sampled dataset
# only test on dataset with more than 10k samples
subset_data %>% compute()
library(ArrowDQAToolkit)
Sys.setenv(SPARK_HOME="/home/anhptq/spark/spark-3.3.0-bin-hadoop3")
personal_info <- as_arrow_table(read_parquet(file.path("/./", "cluster_data", "vrdata", "standardized", "personal_info.parquet")))
personal_info
# get blocks that are valid for further entity resolution step
valid_blocks <- personal_info %>%
filter(
str_length(name) > 1 | str_length(caregiver) > 1
) %>%
mutate(
block = paste(dob, ethnic, sex, sep="_")
) %>%
group_by(block) %>%
summarize(
no_records = n(),
min_date = min(vacdate),
max_date = max(vacdate)
) %>%
filter( (min_date != max_date) & (no_records > 1) ) %>%
compute()
valid_blocks
candidates <- personal_info %>%
filter(
# only include records with valid name of caregiver
str_length(name) > 1 | str_length(caregiver) > 1
) %>%
mutate(
block = paste(dob, ethnic, sex, sep="_")
) %>%
filter(block %in% valid_blocks$block) %>%
compute()
candidates
valid_blocks %>%
mutate(
block_pairs = no_records*(no_records - 1)/2
) %>%
summarize(
total_pairs = sum(block_pairs)
) %>%
collect()
subset_blocks <- valid_blocks[1:10,]
subset_data <- candidates %>%
filter(block %in% subset_blocks$block) %>%
compute()
# -- test: check caregivers associated with more than 1 pid
subset_data %>%
group_by(caregiver) %>%
count() %>%
filter(n > 1) %>%
collect()
# --- check number of rows in the sampled dataset
# only test on dataset with more than 10k samples
subset_data %>% compute()
reticulate::repl_python()
# work around to render altair charts in RStudio
library(reticulate)
library(vegawidget)
specs <- list(
`$schema` = py$estimate_parameter_chart$to_dict()["$schema"],
data = py$spec_data,
mark = py$estimate_parameter_chart$to_dict()["mark"],
encoding = py$estimate_parameter_chart$to_dict()["encoding"],
title = py$estimate_parameter_chart$to_dict()["title"]
) %>% as_vegaspec()
vegawidget(specs)
class(specs)
class(specs$data)
class(specs)
vw_as_json(specs, pretty = TRUE)
specs <- list(
py$estimate_parameter_chart$to_dict()["$schema"],
data = py$spec_data,
py$estimate_parameter_chart$to_dict()["mark"],
py$estimate_parameter_chart$to_dict()["encoding"],
py$estimate_parameter_chart$to_dict()["title"],
py$estimate_parameter_chart$to_dict()["config"]
) %>% as_vegaspec()
vegawidget(specs)
specs <- list(
py$estimate_parameter_chart$to_dict()["$schema"],
data = py$spec_data,
py$estimate_parameter_chart$to_dict()["mark"],
py$estimate_parameter_chart$to_dict()["encoding"],
py$estimate_parameter_chart$to_dict()["title"],
py$estimate_parameter_chart$to_dict()["config"]
) %>% as_vegaspec()
vw_as_json(specs)
specs <- list(
`$schema` = py$estimate_parameter_chart$to_dict()["$schema"],
data = py$spec_data,
mark = py$estimate_parameter_chart$to_dict()["mark"],
encoding = py$estimate_parameter_chart$to_dict()["encoding"],
title = py$estimate_parameter_chart$to_dict()["title"],
config = py$estimate_parameter_chart$to_dict()["config"]
) %>% as_vegaspec()
vw_as_json(specs)
specs <- list(
`$schema` = py$estimate_parameter_chart$to_dict()["$schema"],
data = py$spec_data,
mark = py$estimate_parameter_chart$to_dict()["mark"],
encoding = py$estimate_parameter_chart$to_dict()["encoding"],
title = py$estimate_parameter_chart$to_dict()["title"],
config = py$estimate_parameter_chart$to_dict()["config"]
)
spects
specs
specs <- list(
py$estimate_parameter_chart$to_dict()["$schema"],
data = py$spec_data,
mark = py$estimate_parameter_chart$to_dict()["mark"],
encoding = py$estimate_parameter_chart$to_dict()["encoding"],
title = py$estimate_parameter_chart$to_dict()["title"],
config = py$estimate_parameter_chart$to_dict()["config"]
)
specs
as_vegaspec(specs)
specs <- list(
py$estimate_parameter_chart$to_dict()["$schema"],
data = list(data=py$spec_data),
mark = py$estimate_parameter_chart$to_dict()["mark"],
encoding = py$estimate_parameter_chart$to_dict()["encoding"],
title = py$estimate_parameter_chart$to_dict()["title"],
config = py$estimate_parameter_chart$to_dict()["config"]
)
as_vegaspec(specs)
specs <- list(
`$schema` = py$estimate_parameter_chart$to_dict()["$schema"],
data = list(data=py$spec_data),
mark = py$estimate_parameter_chart$to_dict()["mark"],
encoding = py$estimate_parameter_chart$to_dict()["encoding"],
title = py$estimate_parameter_chart$to_dict()["title"],
config = py$estimate_parameter_chart$to_dict()["config"]
)
as_vegaspec(specs)
specs <- list(
`$schema` = py$estimate_parameter_chart$to_dict()["$schema"],
data = list(data=py$spec_data),
mark = py$estimate_parameter_chart$to_dict()["mark"],
py$estimate_parameter_chart$to_dict()["encoding"],
title = py$estimate_parameter_chart$to_dict()["title"],
config = py$estimate_parameter_chart$to_dict()["config"]
)
as_vegaspec(specs)
specs <- list(
`$schema` = py$estimate_parameter_chart$to_dict()["$schema"],
data = list(data=py$spec_data),
py$estimate_parameter_chart$to_dict()["mark"],
py$estimate_parameter_chart$to_dict()["encoding"],
py$estimate_parameter_chart$to_dict()["title"],
py$estimate_parameter_chart$to_dict()["config"]
)
as_vegaspec(specs)
specs <- list(
py$estimate_parameter_chart$to_dict()["$schema"],
data = list(data=py$spec_data),
py$estimate_parameter_chart$to_dict()["mark"],
py$estimate_parameter_chart$to_dict()["encoding"],
py$estimate_parameter_chart$to_dict()["title"],
py$estimate_parameter_chart$to_dict()["config"]
)
py$estimate_parameter_chart$to_dict()["mark"]
as_vegaspec(specs)
specs <- list(
py$estimate_parameter_chart$to_dict()["$schema"],
data = list(data=py$spec_data),
py$estimate_parameter_chart$to_dict()["mark"],
py$estimate_parameter_chart$to_dict()["encoding"],
py$estimate_parameter_chart$to_dict()["title"],
py$estimate_parameter_chart$to_dict()["config"]
)
as_vegaspec(specs
specs <- list(
specs <- list(
py$estimate_parameter_chart$to_dict()["$schema"],
data = list(data=py$spec_data),
py$estimate_parameter_chart$to_dict()["mark"],
py$estimate_parameter_chart$to_dict()["encoding"],
py$estimate_parameter_chart$to_dict()["title"],
py$estimate_parameter_chart$to_dict()["config"]
)
as_vegaspec(specs)
vw_as_json(specs)
specs <- list(
py$estimate_parameter_chart$to_dict()["$schema"],
data = list(data=py$spec_data),
py$estimate_parameter_chart$to_dict()["mark"],
py$estimate_parameter_chart$to_dict()["encoding"],
py$estimate_parameter_chart$to_dict()["title"],
py$estimate_parameter_chart$to_dict()["config"]
)
as_vegaspec(specs)
vw_as_json(specs)
py$estimate_parameter_chart$to_dict()["$schema"]$`$schema`
specs <- list(
`$schema` = py$estimate_parameter_chart$to_dict()["$schema"]$`$schema`,
data = py$spec_data,
mark = py$estimate_parameter_chart$to_dict()["mark"]$mark,
encoding = py$estimate_parameter_chart$to_dict()["encoding"]$encoding,
title = py$estimate_parameter_chart$to_dict()["title"]$title,
config = py$estimate_parameter_chart$to_dict()["config"]$config
)
as_vegaspec(specs)
specs
vw_as_json(specs)
vegawidget(specs)
reticulate::repl_python()
specs <- list(
`$schema` = py$estimate_parameter_chart$to_dict()["$schema"]$`$schema`,
data = py$spec_data,
mark = py$estimate_parameter_chart$to_dict()["mark"]$mark,
encoding = py$estimate_parameter_chart$to_dict()["encoding"]$encoding,
title = py$estimate_parameter_chart$to_dict()["title"]$title,
config = py$estimate_parameter_chart$to_dict()["config"]$config
)
as_vegaspec(specs)
specs <- list(
`$schema` = py$estimate_parameter_chart$to_dict()["$schema"]$`$schema`,
data = py$spec_data,
mark = py$estimate_parameter_chart$to_dict()["mark"]$mark,
encoding = py$estimate_parameter_chart$to_dict()["encoding"]$encoding,
title = py$estimate_parameter_chart$to_dict()["title"]$title,
config = py$estimate_parameter_chart$to_dict()["config"]$config
) %>% as_vegas()
specs <- list(
`$schema` = py$estimate_parameter_chart$to_dict()["$schema"]$`$schema`,
data = py$spec_data,
mark = py$estimate_parameter_chart$to_dict()["mark"]$mark,
encoding = py$estimate_parameter_chart$to_dict()["encoding"]$encoding,
title = py$estimate_parameter_chart$to_dict()["title"]$title,
config = py$estimate_parameter_chart$to_dict()["config"]$config
) %>% as_vegaspec()
vw_as_json(specs)
vegawidget(specs)
vw_as_json(specs)
reticulate::repl_python()
specs <- list(
`$schema` = py$estimate_parameter_chart$to_dict()["$schema"]$`$schema`,
data = py$spec_data,
mark = py$estimate_parameter_chart$to_dict()["mark"]$mark,
encoding = py$estimate_parameter_chart$to_dict()["encoding"]$encoding,
title = py$estimate_parameter_chart$to_dict()["title"]$title,
config = py$estimate_parameter_chart$to_dict()["config"]$config
) %>% as_vegaspec()
vw_as_json(specs)
vegawidget(specs)
vw_as_json(specs)
reticulate::repl_python()
specs <- list(
`$schema` = py$estimate_parameter_chart$to_dict()["$schema"]$`$schema`,
data = py$spec_data,
mark = py$estimate_parameter_chart$to_dict()["mark"]$mark,
encoding = py$estimate_parameter_chart$to_dict()["encoding"]$encoding,
title = py$estimate_parameter_chart$to_dict()["title"]$title,
config = py$estimate_parameter_chart$to_dict()["config"]$config
) %>% as_vegaspec()
vw_as_json(specs)
vegawidget(specs)
vegawidget(specs)
vw_as_json(specs)
specs$data
type(specs$data)
class(specs$data)
class(specs$config)
as_vegaspec
?as_vegaspec
vw_spec_version()
vw_spec_version(specs)
vw_to_vega(specs)
specs <- list(
`$schema` = py$estimate_parameter_chart$to_dict()["$schema"]$`$schema`,
data = list(values = py$spec_data),
mark = py$estimate_parameter_chart$to_dict()["mark"]$mark,
encoding = py$estimate_parameter_chart$to_dict()["encoding"]$encoding,
title = py$estimate_parameter_chart$to_dict()["title"]$title,
config = py$estimate_parameter_chart$to_dict()["config"]$config
) %>% as_vegaspec()
vw_as_json(specs)
vegawidget(specs)
reticulate::repl_python()
specs <- list(
`$schema` = py$estimate_parameter_chart$to_dict()["$schema"]$`$schema`,
data = list(
name = py$estimate_parameter_chart$to_dict()["data"]$data$name,
transform = py$estimate_parameter_chart$to_dict()["transform"]$transform,
values = py$spec_data),
mark = py$estimate_parameter_chart$to_dict()["mark"]$mark,
encoding = py$estimate_parameter_chart$to_dict()["encoding"]$encoding,
title = py$estimate_parameter_chart$to_dict()["title"]$title,
config = py$estimate_parameter_chart$to_dict()["config"]$config
) %>% as_vegaspec()
vw_as_json(specs)
vegawidget(specs)
vw_as_json(specs)
reticulate::repl_python()
as_vegaspec(py$spec_json)
vs_as_json(as_vegaspec(py$spec_json))
vw_as_json(as_vegaspec(py$spec_json))
specs <- list(
`$schema` = py$estimate_parameter_chart$to_dict()["$schema"]$`$schema`,
data = list(
name = py$estimate_parameter_chart$to_dict()["data"]$data$name,
transform = py$estimate_parameter_chart$to_dict()["transform"]$transform,
values = py$spec_data),
mark = py$estimate_parameter_chart$to_dict()["mark"]$mark,
encoding = py$estimate_parameter_chart$to_dict()["encoding"]$encoding,
title = py$estimate_parameter_chart$to_dict()["title"]$title,
config = py$estimate_parameter_chart$to_dict()["config"]$config
) %>% as_vegaspec()
vw_as_json(specs)
reticulate::repl_python()
class(py$estimate_parameter_chart)
library(altair)
class(py$estimate_parameter_chart)
py$estimate_parameter_chart
as_chart(py$estimate_parameter_chart
)
vega_data <- import_vega_data()
library(altair)
vega_data <- import_vega_data()
library("altair")
vega_data <- import_vega_data()
altair::check_altair()
altair::check_altair()
# work around to render altair charts in RStudio
library(reticulate)
library("altair")
specs <- list(
`$schema` = py$estimate_parameter_chart$to_dict()["$schema"]$`$schema`,
data = list(
name = py$estimate_parameter_chart$to_dict()["data"]$data$name,
transform = py$estimate_parameter_chart$to_dict()["transform"]$transform,
values = py$spec_data),
mark = py$estimate_parameter_chart$to_dict()["mark"]$mark,
encoding = py$estimate_parameter_chart$to_dict()["encoding"]$encoding,
title = py$estimate_parameter_chart$to_dict()["title"]$title,
config = py$estimate_parameter_chart$to_dict()["config"]$config
) %>% as_vegaspec()
vw_as_json(specs)
vegawidget(specs)
?as_vegaspec
class(py$estimate_parameter_chart)
as_chart(py$estimate_parameter_chart
)
altair::check_altair()
reticulate::repl_python()
